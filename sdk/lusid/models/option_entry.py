# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class OptionEntry(BaseModel):
    """
    Item which is stepped in level/quantity.
    """
    strike: Union[StrictFloat, StrictInt] = Field(..., description="The strike on this date")
    var_date: datetime = Field(..., alias="date", description="The date at which the option can be actioned at this strike")
    __properties = ["strike", "date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OptionEntry:
        """Create an instance of OptionEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OptionEntry:
        """Create an instance of OptionEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OptionEntry.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in OptionEntry) in the input: " + obj)

        _obj = OptionEntry.parse_obj({
            "strike": obj.get("strike"),
            "var_date": obj.get("date")
        })
        return _obj

